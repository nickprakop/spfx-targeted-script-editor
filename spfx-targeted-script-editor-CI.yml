# Node.js with React
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
 branches:
  include:
    - main
    - develop
    - acceptance
 paths:
  include:
     - src/** 

variables:
  packageName: 'spfx-targeted-script-editor'
 
stages:
  - stage: Build
    jobs:
      - job:
        pool:
          vmImage: ubuntu-latest

        steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '18.x'
          displayName: 'Install Node.js'

        - script: npm install    
          displayName: 'npm install'

        - script: gulp bundle --ship
          displayName: 'gulp bundle'

        - script: gulp package-solution --ship
          displayName: 'gulp package-solution'

        - task: CopyFiles@2
          inputs:
            contents: '**/*.sppkg'
            TargetFolder: '$(Build.ArtifactStagingDirectory)/$(packageName)'
            flattenFolders: true
        - task: PublishBuildArtifacts@1
          inputs:
           PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(packageName)'
           ArtifactName: $(packageName)

  - stage: Deploy
    displayName: 'Release to Dev site'
    condition: succeeded('Build')
    variables:
    - group: 'Develop environment'
    jobs:
    - deployment: 
      displayName: 'Deployment job'
      environment: 'Development'
      strategy:
       runOnce:
         deploy:
          steps:
            - task: PowerShell@2
              continueOnError: false
              inputs:
                pwsh: true
                targetType: 'inline'
                script: |
                  # Install the PnP PowerShell module
                  Install-Module -Name PnP.PowerShell -Force -AllowClobber -Scope CurrentUser
                  # Connect to SharePoint Online using App-Only authentication
                  $securePassword = ConvertTo-SecureString -String $(appSecret) -AsPlainText -Force
                  Connect-PnPOnline -Url $(siteUrl) -ClientId $(appId) -Tenant $(tenantId) -ClientSecret $securePassword

                  $app = Get-PnPApp -Scope Site | Where { $_.Title -eq '$(packageName)'' }
                  #if app has not been installed so far -> install it
                  if (!$app) {
                      #add app to the app catalog
                      $app = Add-PnPApp -Path $(Build.ArtifactStagingDirectory)/$(packageName)/$(packageName).sppkg -Scope Site   
                      #publish app in the app catalog
                      Publish-PnPApp -Identity $app.Id -Scope Site
                      #install app on the site
                      Install-PnPApp -Identity $app.Id -Scope Site -Wait

                      Write-Host "$($app.Title) has been successfully installed"

                  }
                  else {
                      #if app has been already added to app catalog uninstall and install it again
                      Uninstall-PnPApp -Identity $app.Id -Scope Site  
                      #and dump wait untill app is uninstalled -> no other working way to check it?   
                      sleep -Seconds 10   
                      #remove app from the app catalog  
                      Remove-PnPApp -Identity $app.Id -Scope Site
                      #add app to the app catalog
                      $app = Add-PnPApp -Path $(Build.ArtifactStagingDirectory)/$(packageName)/$(packageName).sppkg -Scope Site  
                      #publish app in the app catalog
                      Publish-PnPApp -Identity $app.Id -Scope Site
                      #install app on the site and wait for the process to be finished
                      Install-PnPApp -Identity $app.Id -Scope Site -Wait
                      #Update-PnPApp -Identity $app.Id -Scope Site 

                      Write-Host "$($app.Title) has been successfully re-installed"
                  }
                  # # Upload the .sppkg file to the App Catalog
                  # Add-PnPApp -Path $(Build.ArtifactStagingDirectory)/$(packageName)/$(packageName).sppkg -Overwrite
                  # # Deploy the app in the App Catalog
                  # Install-PnPApp -Identity (Get-PnPApp -Scope Tenant -AppId $(packageName).sppkg) -Scope Tenant
              displayName: 'Deploy SPFx solution to SharePoint Online'
                  