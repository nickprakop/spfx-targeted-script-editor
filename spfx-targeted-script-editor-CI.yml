# Node.js with React
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
 branches:
  include:
    - main
    - develop
    - acceptance
 paths:
  include:
     - src/** 

variables:
  packageName: 'spfx-targeted-script-editor'
 
stages:
  - stage: Build
    jobs:
      - job:
        pool:
          vmImage: ubuntu-latest

        steps:
        - task: NodeTool@0
          inputs:
            versionSpec: '18.x'
          displayName: 'Install Node.js'

        - script: npm install    
          displayName: 'npm install'

        - script: gulp bundle --ship
          displayName: 'gulp bundle'

        - script: gulp package-solution --ship
          displayName: 'gulp package-solution'

        - task: CopyFiles@2
          inputs:
            contents: '**/*.sppkg'
            TargetFolder: '$(Build.ArtifactStagingDirectory)/$(packageName)'
            flattenFolders: true
        - task: PublishBuildArtifacts@1
          inputs:
           PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(packageName)'
           ArtifactName: $(packageName)

  - stage: Deploy
    jobs:
      - job:
        pool:
          vmImage: ubuntu-latest
        
        steps:
         - task: PowerShell@2
           continueOnError: false
           inputs:
            pwsh: true
        targetType: 'inline'
        script: |
          $tenant = "$(Tenant)"
          $tenantAdminURL = "$env:TenantAdminURL"
          $powershellPath = "$env:PowerShellPath"
          $pnpPowershell = "$env:Tools_PnP_PowerShell"
          $certbase = "$env:CERTBASE64ENCODED"
          $clientId = "$(ClientId)"
          $packagePath = "${{ parameters.packagePath }}"
          $siteURLs = "$env:SiteCollectionURLs"

          #Write-Host "Args: $($tenant), $($tenantAdminURL), $($powershellPath), $($pnpPowershell), $($certbase), $($clientId), $($packagePath)";
          
          . "$powershellPath\_helpers.ps1"

          Write-Host "Loading PnP module"
          Import-Module "$pnpPowershell\PnP.PowerShell.psd1" -DisableNameChecking
          
          $connArgs = Get-SiteConnectionArguments `
          -ClientId $clientId `
          -CertificateBase64Encoded $certbase `
          -Tenant $tenant

          foreach ($siteURL in $siteURLs) {
            try {
              $siteConnection = Get-SiteConnection -SiteUrl $siteURL @connArgs
              
              . "$powershellPath\Deploy-SPFxComponents.ps1" `
              -Connection $siteConnection `
              -PackagePath $packagePath `
              -AppScope "Site"
            }
            catch {
              Write-Host "An error occurred: " -ForegroundColor Red -NoNewline;
              Write-Host $_ -ForegroundColor Red;
              Continue
            }
          }
        showWarnings: true
      env:
          CERTBASE64ENCODED: $(CertBase64Encoded)
      displayName: "Add package to Site Collection catalog"
              